FORM by J.Vermaseren,version 3.3(Jul  9 2009) Run at: Thu Dec 22 15:48:51 2016
    *==========================================================================
    *   This file is part of the demos for 
    *    "Generalization of the explicit expression for the Deprit generator 
    *       to  Hamiltonians nonlinearly dependent on small parameter"
    *    Andrey S. Nikolaev (Andrey.Nikolaev@rdtex.ru), 
    *==========================================================================
    #define MAXORDER	"3"
    #define MAXREPS "10"
    Functions L,S,P,Q,I,Op,aL
    #do k = 0,'MAXORDER'+1
     ,H'k'
    #enddo
    ;
    Set op:L,S,P,Q,I,Op;
    .global
    nwrite statistics;
    Symbols l,m,n,k,alpha(:{'MAXORDER'}),z(:{'MAXORDER'});
    .global
    Global H  = H0 + 
    #do k=1,'MAXORDER'
     + alpha^'k'*H'k'
    #enddo
    ;
    B alpha;
    Print;
    .store

   H =
       + alpha * ( H1 )

       + alpha^2 * ( H2 )

       + alpha^3 * ( H3 )

       + H0;

    *-------------------- 
    *     1. The perturbed integrating operator is:
    *-------------------- 
    #call RH()

Time =       0.00 sec    Generated terms =        515
             RH3         Terms in output =        515
                         Bytes used      =      19586
    G Sh=RH'MAXORDER'[z^0];
    .store
    *-------------------- 
    *     2. dH/dalpha is:
    *-------------------- 
    G dHdalpha=H;
    id alpha^n? = n*alpha^(n-1);
    .store
    *-------------------- 
    *     3. The explicit expression for generator 
    *         W=S_H dH/dalpha
    *-------------------- 
    G W=Sh*dHdalpha;
    B alpha;
    Print;
    .store

   W =
       + alpha * (  - S*L(H1)*S*H1 + S*S*L(H1)*P*H1 + 2*S*H2 + P*L(H1)*S*S*H1
          )

       + alpha^2 * ( S*L(H1)*S*L(H1)*S*H1 - S*L(H1)*S*S*L(H1)*P*H1 - 2*S*L(H1)
         *S*H2 - S*L(H1)*P*L(H1)*S*S*H1 - S*L(H2)*S*H1 - S*S*L(H1)*S*L(H1)*P*
         H1 - S*S*L(H1)*P*L(H1)*S*H1 + 2*S*S*L(H1)*P*H2 + S*S*L(H2)*P*H1 + S*S
         *S*L(H1)*P*L(H1)*P*H1 + 3*S*H3 - P*L(H1)*S*L(H1)*S*S*H1 - P*L(H1)*S*S
         *L(H1)*S*H1 + P*L(H1)*S*S*S*L(H1)*P*H1 + 2*P*L(H1)*S*S*H2 + P*L(H1)*P
         *L(H1)*S*S*S*H1 + P*L(H2)*S*S*H1 )

       + alpha^3 * (  - S*L(H1)*S*L(H1)*S*L(H1)*S*H1 + S*L(H1)*S*L(H1)*S*S*L(
         H1)*P*H1 + 2*S*L(H1)*S*L(H1)*S*H2 + S*L(H1)*S*L(H1)*P*L(H1)*S*S*H1 + 
         S*L(H1)*S*L(H2)*S*H1 + S*L(H1)*S*S*L(H1)*S*L(H1)*P*H1 + S*L(H1)*S*S*
         L(H1)*P*L(H1)*S*H1 - 2*S*L(H1)*S*S*L(H1)*P*H2 - S*L(H1)*S*S*L(H2)*P*
         H1 - S*L(H1)*S*S*S*L(H1)*P*L(H1)*P*H1 - 3*S*L(H1)*S*H3 + S*L(H1)*P*L(
         H1)*S*L(H1)*S*S*H1 + S*L(H1)*P*L(H1)*S*S*L(H1)*S*H1 - S*L(H1)*P*L(H1)
         *S*S*S*L(H1)*P*H1 - 2*S*L(H1)*P*L(H1)*S*S*H2 - S*L(H1)*P*L(H1)*P*L(H1
         )*S*S*S*H1 - S*L(H1)*P*L(H2)*S*S*H1 + S*L(H2)*S*L(H1)*S*H1 - S*L(H2)*
         S*S*L(H1)*P*H1 - 2*S*L(H2)*S*H2 - S*L(H2)*P*L(H1)*S*S*H1 - S*L(H3)*S*
         H1 + S*S*L(H1)*S*L(H1)*S*L(H1)*P*H1 + S*S*L(H1)*S*L(H1)*P*L(H1)*S*H1
          - 2*S*S*L(H1)*S*L(H1)*P*H2 - S*S*L(H1)*S*L(H2)*P*H1 - S*S*L(H1)*S*S*
         L(H1)*P*L(H1)*P*H1 + S*S*L(H1)*P*L(H1)*S*L(H1)*S*H1 - S*S*L(H1)*P*L(
         H1)*S*S*L(H1)*P*H1 - 2*S*S*L(H1)*P*L(H1)*S*H2 - S*S*L(H1)*P*L(H1)*P*
         L(H1)*S*S*H1 - S*S*L(H1)*P*L(H2)*S*H1 + 3*S*S*L(H1)*P*H3 - S*S*L(H2)*
         S*L(H1)*P*H1 - S*S*L(H2)*P*L(H1)*S*H1 + 2*S*S*L(H2)*P*H2 + S*S*L(H3)*
         P*H1 - S*S*S*L(H1)*S*L(H1)*P*L(H1)*P*H1 - S*S*S*L(H1)*P*L(H1)*S*L(H1)
         *P*H1 - S*S*S*L(H1)*P*L(H1)*P*L(H1)*S*H1 + 2*S*S*S*L(H1)*P*L(H1)*P*H2
          + S*S*S*L(H1)*P*L(H2)*P*H1 + S*S*S*L(H2)*P*L(H1)*P*H1 + S*S*S*S*L(H1
         )*P*L(H1)*P*L(H1)*P*H1 + P*L(H1)*S*L(H1)*S*L(H1)*S*S*H1 + P*L(H1)*S*
         L(H1)*S*S*L(H1)*S*H1 - P*L(H1)*S*L(H1)*S*S*S*L(H1)*P*H1 - 2*P*L(H1)*S
         *L(H1)*S*S*H2 - P*L(H1)*S*L(H1)*P*L(H1)*S*S*S*H1 - P*L(H1)*S*L(H2)*S*
         S*H1 + P*L(H1)*S*S*L(H1)*S*L(H1)*S*H1 - P*L(H1)*S*S*L(H1)*S*S*L(H1)*P
         *H1 - 2*P*L(H1)*S*S*L(H1)*S*H2 - P*L(H1)*S*S*L(H1)*P*L(H1)*S*S*H1 - P
         *L(H1)*S*S*L(H2)*S*H1 - P*L(H1)*S*S*S*L(H1)*S*L(H1)*P*H1 - P*L(H1)*S*
         S*S*L(H1)*P*L(H1)*S*H1 + 2*P*L(H1)*S*S*S*L(H1)*P*H2 + P*L(H1)*S*S*S*
         L(H2)*P*H1 + P*L(H1)*S*S*S*S*L(H1)*P*L(H1)*P*H1 + 3*P*L(H1)*S*S*H3 - 
         P*L(H1)*P*L(H1)*S*L(H1)*S*S*S*H1 - P*L(H1)*P*L(H1)*S*S*L(H1)*S*S*H1
          - P*L(H1)*P*L(H1)*S*S*S*L(H1)*S*H1 + P*L(H1)*P*L(H1)*S*S*S*S*L(H1)*P
         *H1 + 2*P*L(H1)*P*L(H1)*S*S*S*H2 + P*L(H1)*P*L(H1)*P*L(H1)*S*S*S*S*H1
          + P*L(H1)*P*L(H2)*S*S*S*H1 - P*L(H2)*S*L(H1)*S*S*H1 - P*L(H2)*S*S*L(
         H1)*S*H1 + P*L(H2)*S*S*S*L(H1)*P*H1 + 2*P*L(H2)*S*S*H2 + P*L(H2)*P*L(
         H1)*S*S*S*H1 + P*L(H3)*S*S*H1 )

       + S*H1;

    *--------------------
    *     4. U_G up to alpha^MAXORDER:
    *--------------------
    #call U(W,demo1)

Time =       0.00 sec    Generated terms =         33
          demo1U         Terms in output =         33
                         Bytes used      =       1322
    Global U =demo1U; 
    B alpha;
    Print;
    .store

   U =
       + alpha * ( L(S,H1) )

       + alpha^2 * (  - 1/2*L(S,L(H1),S,H1) + 1/2*L(S,S,L(H1),P,H1) + 1/2*L(S,
         H1)*L(S,H1) + L(S,H2) + 1/2*L(P,L(H1),S,S,H1) )

       + alpha^3 * ( 1/3*L(S,L(H1),S,L(H1),S,H1) - 1/3*L(S,L(H1),S,S,L(H1),P,
         H1) - 1/6*L(S,L(H1),S,H1)*L(S,H1) - 2/3*L(S,L(H1),S,H2) - 1/3*L(S,L(
         H1),P,L(H1),S,S,H1) - 1/3*L(S,L(H2),S,H1) - 1/3*L(S,S,L(H1),S,L(H1),P
         ,H1) - 1/3*L(S,S,L(H1),P,L(H1),S,H1) + 1/6*L(S,S,L(H1),P,H1)*L(S,H1)
          + 2/3*L(S,S,L(H1),P,H2) + 1/3*L(S,S,L(H2),P,H1) + 1/3*L(S,S,S,L(H1),
         P,L(H1),P,H1) - 1/3*L(S,H1)*L(S,L(H1),S,H1) + 1/3*L(S,H1)*L(S,S,L(H1)
         ,P,H1) + 1/6*L(S,H1)*L(S,H1)*L(S,H1) + 2/3*L(S,H1)*L(S,H2) + 1/3*L(S,
         H1)*L(P,L(H1),S,S,H1) + 1/3*L(S,H2)*L(S,H1) + L(S,H3) - 1/3*L(P,L(H1)
         ,S,L(H1),S,S,H1) - 1/3*L(P,L(H1),S,S,L(H1),S,H1) + 1/3*L(P,L(H1),S,S,
         S,L(H1),P,H1) + 1/6*L(P,L(H1),S,S,H1)*L(S,H1) + 2/3*L(P,L(H1),S,S,H2)
          + 1/3*L(P,L(H1),P,L(H1),S,S,S,H1) + 1/3*L(P,L(H2),S,S,H1) )

       + 1;

    *--------------------
    *     5. The transformed Hamiltonian:
    *--------------------
    Global HH= U*H;
    B alpha;
    Print;
    .sort

   HH =
       + alpha * ( L(S,H1)*H0 + H1 )

       + alpha^2 * (  - 1/2*L(S,L(H1),S,H1)*H0 + 1/2*L(S,S,L(H1),P,H1)*H0 + 1/
         2*L(S,H1)*L(S,H1)*H0 + L(S,H1)*H1 + L(S,H2)*H0 + 1/2*L(P,L(H1),S,S,H1
         )*H0 + H2 )

       + alpha^3 * ( 1/3*L(S,L(H1),S,L(H1),S,H1)*H0 - 1/3*L(S,L(H1),S,S,L(H1),
         P,H1)*H0 - 1/6*L(S,L(H1),S,H1)*L(S,H1)*H0 - 1/2*L(S,L(H1),S,H1)*H1 - 
         2/3*L(S,L(H1),S,H2)*H0 - 1/3*L(S,L(H1),P,L(H1),S,S,H1)*H0 - 1/3*L(S,
         L(H2),S,H1)*H0 - 1/3*L(S,S,L(H1),S,L(H1),P,H1)*H0 - 1/3*L(S,S,L(H1),P
         ,L(H1),S,H1)*H0 + 1/6*L(S,S,L(H1),P,H1)*L(S,H1)*H0 + 1/2*L(S,S,L(H1),
         P,H1)*H1 + 2/3*L(S,S,L(H1),P,H2)*H0 + 1/3*L(S,S,L(H2),P,H1)*H0 + 1/3*
         L(S,S,S,L(H1),P,L(H1),P,H1)*H0 - 1/3*L(S,H1)*L(S,L(H1),S,H1)*H0 + 1/3
         *L(S,H1)*L(S,S,L(H1),P,H1)*H0 + 1/6*L(S,H1)*L(S,H1)*L(S,H1)*H0 + 1/2*
         L(S,H1)*L(S,H1)*H1 + 2/3*L(S,H1)*L(S,H2)*H0 + 1/3*L(S,H1)*L(P,L(H1),S
         ,S,H1)*H0 + L(S,H1)*H2 + 1/3*L(S,H2)*L(S,H1)*H0 + L(S,H2)*H1 + L(S,H3
         )*H0 - 1/3*L(P,L(H1),S,L(H1),S,S,H1)*H0 - 1/3*L(P,L(H1),S,S,L(H1),S,
         H1)*H0 + 1/3*L(P,L(H1),S,S,S,L(H1),P,H1)*H0 + 1/6*L(P,L(H1),S,S,H1)*
         L(S,H1)*H0 + 1/2*L(P,L(H1),S,S,H1)*H1 + 2/3*L(P,L(H1),S,S,H2)*H0 + 1/
         3*L(P,L(H1),P,L(H1),S,S,S,H1)*H0 + 1/3*L(P,L(H2),S,S,H1)*H0 + H3 )

       + H0;

    #call identities4()
    .sort
    #call identities4()
    .sort
    .sort
    #call identities3()
    write statistics;
    id P*L(H1)*S*S*H1*I=0;
    id P*L(H2)*S*S*H2*I=0;
    id P*L(H2)*S*H1*I=P*L(H1)*S*H2*I;
    id P*L(H3)*S*H1*I=P*L(H1)*S*H3*I;
    id I=1;
    B alpha;
    Print;
    .store

Time =       0.01 sec    Generated terms =          9
              HH         Terms in output =          8
                         Bytes used      =        242

   HH =
       + alpha * ( P*H1 )

       + alpha^2 * (  - 1/2*P*L(H1)*S*H1 + P*H2 )

       + alpha^3 * ( 1/3*P*L(H1)*S*L(H1)*S*H1 - 1/6*P*L(H1)*S*S*L(H1)*P*H1 - P
         *L(H1)*S*H2 + P*H3 )

       + H0;

    *--------------------
    *   4. U_G^-1 up to alpha^MAXORDER:
    *--------------------
    #call Uinverse(W,demo2)

Time =       0.03 sec    Generated terms =         33
         demo2Ui         Terms in output =         33
                         Bytes used      =       1322
    Global Uinverse =demo2Ui; 
    B alpha;
    Print;
    .store

   Uinverse =
       + alpha * (  - L(S,H1) )

       + alpha^2 * ( 1/2*L(S,L(H1),S,H1) - 1/2*L(S,S,L(H1),P,H1) + 1/2*L(S,H1)
         *L(S,H1) - L(S,H2) - 1/2*L(P,L(H1),S,S,H1) )

       + alpha^3 * (  - 1/3*L(S,L(H1),S,L(H1),S,H1) + 1/3*L(S,L(H1),S,S,L(H1),
         P,H1) - 1/3*L(S,L(H1),S,H1)*L(S,H1) + 2/3*L(S,L(H1),S,H2) + 1/3*L(S,
         L(H1),P,L(H1),S,S,H1) + 1/3*L(S,L(H2),S,H1) + 1/3*L(S,S,L(H1),S,L(H1)
         ,P,H1) + 1/3*L(S,S,L(H1),P,L(H1),S,H1) + 1/3*L(S,S,L(H1),P,H1)*L(S,H1
         ) - 2/3*L(S,S,L(H1),P,H2) - 1/3*L(S,S,L(H2),P,H1) - 1/3*L(S,S,S,L(H1)
         ,P,L(H1),P,H1) - 1/6*L(S,H1)*L(S,L(H1),S,H1) + 1/6*L(S,H1)*L(S,S,L(H1
         ),P,H1) - 1/6*L(S,H1)*L(S,H1)*L(S,H1) + 1/3*L(S,H1)*L(S,H2) + 1/6*L(S
         ,H1)*L(P,L(H1),S,S,H1) + 2/3*L(S,H2)*L(S,H1) - L(S,H3) + 1/3*L(P,L(H1
         ),S,L(H1),S,S,H1) + 1/3*L(P,L(H1),S,S,L(H1),S,H1) - 1/3*L(P,L(H1),S,S
         ,S,L(H1),P,H1) + 1/3*L(P,L(H1),S,S,H1)*L(S,H1) - 2/3*L(P,L(H1),S,S,H2
         ) - 1/3*L(P,L(H1),P,L(H1),S,S,S,H1) - 1/3*L(P,L(H2),S,S,H1) )

       + 1;

    *--------------------
    *  5. The Gustavson-Hori first integral I_G=U_G^-1 H0
    *     and its nontrivial part  
    *--------------------
    Global IH0= Uinverse*H0;
    B alpha;
    *Print;
    .sort
    Global IG= (H-IH0)/alpha;
    B alpha;
    *Print;
    .sort
    *--------------------
    *  6. Canonical simplifications of Hori integral
    *--------------------
    #call identities4()
    B alpha;
    *Print;
    .sort
    #call identities4()
    .sort
    id P*L(H2)*S*H1*I=P*L(H1)*S*H2*I;
    id I=1;
    B alpha;
    Print;
    .store

   IH0 =
       + alpha * (  - P*H1 + H1 )

       + alpha^2 * ( S*L(H1)*P*H1 + 1/2*P*L(H1)*S*H1 - P*H2 + H2 )

       + alpha^3 * (  - S*L(H1)*S*L(H1)*P*H1 - 1/2*S*L(H1)*P*L(H1)*S*H1 + S*L(
         H1)*P*H2 + S*L(H2)*P*H1 - 1/3*P*L(H1)*S*L(H1)*S*H1 + 2/3*P*L(H1)*S*S*
         L(H1)*P*H1 + P*L(H1)*S*H2 + 1/3*P*L(H1)*P*L(H1)*S*S*H1 - P*H3 + H3 )

       + H0;

   IG =
       + alpha * (  - S*L(H1)*P*H1 - 1/2*P*L(H1)*S*H1 + P*H2 )

       + alpha^2 * ( S*L(H1)*S*L(H1)*P*H1 + 1/2*S*L(H1)*P*L(H1)*S*H1 - S*L(H1)
         *P*H2 - S*L(H2)*P*H1 + 1/3*P*L(H1)*S*L(H1)*S*H1 - 2/3*P*L(H1)*S*S*L(
         H1)*P*H1 - P*L(H1)*S*H2 - 1/3*P*L(H1)*P*L(H1)*S*S*H1 + P*H3 )

       + P*H1;

    *--------------------
    *  7. It is commutative with the perturbed Hamiltonian
    *--------------------
    G LH=H;
    #call toliouvillian()
    B alpha;
    *Print;
    .store
    on statistics;
    L delta=LH*IH0;
    B alpha;
    Print;
    .sort

Time =       0.03 sec    Generated terms =         28
           delta         Terms in output =         28
                         Bytes used      =        766

   delta =
       + alpha * (  - L(H0)*P*H1 + L(H0)*H1 + L(H1)*H0 )

       + alpha^2 * ( L(H0)*S*L(H1)*P*H1 + 1/2*L(H0)*P*L(H1)*S*H1 - L(H0)*P*H2
          + L(H0)*H2 - L(H1)*P*H1 + L(H1)*H1 + L(H2)*H0 )

       + alpha^3 * (  - L(H0)*S*L(H1)*S*L(H1)*P*H1 - 1/2*L(H0)*S*L(H1)*P*L(H1)
         *S*H1 + L(H0)*S*L(H1)*P*H2 + L(H0)*S*L(H2)*P*H1 - 1/3*L(H0)*P*L(H1)*S
         *L(H1)*S*H1 + 2/3*L(H0)*P*L(H1)*S*S*L(H1)*P*H1 + L(H0)*P*L(H1)*S*H2
          + 1/3*L(H0)*P*L(H1)*P*L(H1)*S*S*H1 - L(H0)*P*H3 + L(H0)*H3 + L(H1)*S
         *L(H1)*P*H1 + 1/2*L(H1)*P*L(H1)*S*H1 - L(H1)*P*H2 + L(H1)*H2 - L(H2)*
         P*H1 + L(H2)*H1 + L(H3)*H0 )

       + L(H0)*H0;

    #call identities7()

Time =       0.03 sec    Generated terms =         28
           delta         Terms in output =         28
                         Bytes used      =        866

Time =       0.03 sec    Generated terms =         22
           delta         Terms in output =          0
                         Bytes used      =          2
    B alpha;
    Print;
    .end

Time =       0.03 sec    Generated terms =          0
           delta         Terms in output =          0
                         Bytes used      =          2

   delta = 0;

  0.03 sec out of 0.39 sec
